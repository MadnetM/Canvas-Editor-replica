jobs:
  update-contributors:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
    - name: Collect Workflow Telemetry
      uses: Nfsaavedra/workflow-telemetry-action@raw_data
      with:
        save_raw_stats: true
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.x
    - name: Create and run update script
      run: "cat > update_contributors.py << 'EOF'\nimport subprocess\nimport re\n\
        import os\n\ndef normalize_name(name):\n    name = re.sub(r'\\[bot\\]$', '',\
        \ name)\n    if name.lower() in ['github action', 'github actions', 'github-actions']:\n\
        \        return None\n    return name.strip()\n\ndef get_contributors():\n\
        \    try:\n        git_log = subprocess.check_output(\n            ['git',\
        \ 'log', '--format=\"%aN <%aE>\"'],\n            universal_newlines=True,\n\
        \            stderr=subprocess.STDOUT\n        )\n    except subprocess.CalledProcessError\
        \ as e:\n        print(f\"Error getting git log: {e.output}\")\n        return\
        \ []\n\n    contributors_dict = {}\n    for line in git_log.replace('\"',\
        \ '').split('\\n'):\n        if not line:\n            continue\n\n      \
        \  name = normalize_name(line.split(' <')[0])  # Extract name from 'Name <email>'\n\
        \        if not name:\n            continue\n\n        email = line.split('<')[-1].strip('>')\
        \  # Extract email from 'Name <email>'\n        contributors_dict[name] =\
        \ email\n\n    return sorted(contributors_dict.items())\n\ndef format_contributors_table(contributors):\n\
        \    # Create a table without headers\n    table = \"\"\n    \n    # Add rows\
        \ of contributors\n    for i in range(0, len(contributors), 10):\n       \
        \ row1 = \" | \".join(f\"[{name}](https://github.com/{name})\" for name, _\
        \ in contributors[i:i+10])\n        row2 = \" | \".join(f\"[{name}](https://github.com/{name})\"\
        \ for name, _ in contributors[i+10:i+20])\n        if row1.strip():  # Check\
        \ if row is not empty\n            table += f\"| {row1} | {row2} |\\n\"\n\n\
        \    return table\n\ndef update_readme():\n    if not os.path.exists('README.md'):\n\
        \        print(\"README.md not found!\")\n        return False\n\n    try:\n\
        \        with open('README.md', 'r', encoding='utf-8') as f:\n           \
        \ content = f.read()\n\n        # Get contributors list\n        contributors\
        \ = get_contributors()\n        if not contributors:\n            print(\"\
        No contributors found!\")\n            return False\n\n        # Create the\
        \ contributors table\n        contributors_table = \"## Contributors\\n\\\
        n\"\n        contributors_table += format_contributors_table(contributors)\n\
        \        contributors_table += \"\\n\"\n\n        # Find the contributors\
        \ section using a more flexible pattern\n        contributors_pattern = r'##\
        \ Contributors\\s*\\n(?:.*\\n)*?(?=\\n##|\\Z)'\n        contributing_people_pattern\
        \ = r'## Contributing People\\s*\\n(?:.*\\n)*?(?=\\n##|\\Z)'\n\n        #\
        \ Replace existing Contributors section if it exists\n        if re.search(contributors_pattern,\
        \ content, re.DOTALL):\n            new_content = re.sub(contributors_pattern,\
        \ contributors_table, content, flags=re.DOTALL)\n        else:\n         \
        \   new_content = content\n\n        # Check if Contributing People section\
        \ exists and preserve it\n        if re.search(contributing_people_pattern,\
        \ content, re.DOTALL):\n            # Preserve the Contributing People section\n\
        \            contributing_people_section = re.search(contributing_people_pattern,\
        \ content, re.DOTALL).group(0)\n            new_content = re.sub(contributing_people_pattern,\
        \ contributing_people_section, new_content, flags=re.DOTALL)\n\n        #\
        \ Add the Contributors section before the Contributing section if it doesn't\
        \ exist\n        if not re.search(contributors_pattern, new_content, re.DOTALL):\n\
        \            new_content = re.sub(\n                r'(## Contributing)',\n\
        \                f'{contributors_table}\\n\\\\1',\n                new_content\n\
        \            )\n\n        with open('README.md', 'w', encoding='utf-8') as\
        \ f:\n            f.write(new_content)\n\n        return True\n\n    except\
        \ Exception as e:\n        print(f\"Error updating README.md: {e}\")\n   \
        \     return False\n\nif __name__ == \"__main__\":\n    print(\"Starting contributors\
        \ update...\")\n    success = update_readme()\n    if not success:\n     \
        \   print(\"Failed to update README.md!\")\n        exit(1)\n\n    print(\"\
        Successfully updated contributors!\")\nEOF\n\n# Run the Python script\npython\
        \ update_contributors.py\n"
    - name: Commit and push if changed
      run: "git config --global user.name 'github-actions[bot]'\n\n# Check if README.md\
        \ has changed\nif git diff --quiet README.md; then\n  echo \"No changes to\
        \ commit\"\n  exit 0\nfi\n\ngit add README.md\ngit commit -m \"docs: update\
        \ contributors list\"\ngit push\n"
name: Update Contributors
'on':
- workflow_dispatch
permissions: write-all
